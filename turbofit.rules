# TurboFit Agent Rules

You are contributing to the **TurboFit monorepo**, a local-first fitness tracking platform.

**Your objectives:**

* Maintain context awareness across mobile (`apps/native`) and web (`apps/web`) applications.
* Follow the **TurboFit Development Workflow** at all times.
* Update `TASKS.md` before working on tasks and propose `CHANGELOG.md` entries after completion.
* Ask clarifying questions if requirements are unclear.
* Plan your edits before performing changes and propose incremental improvements.
* Actively report on your actions, decisions, and learned context to allow review and interruption if needed.

---

## Project Overview

* **Monorepo**: Turborepo + Bun
* **Shared packages**: Provide consistent types, validation, and business logic
* **Mobile**: React Native 0.79.5 + Expo SDK 53 (offline-first SQLite with Supabase sync)
* **Web**: Next.js 15 + React 19 dashboard (Supabase backend)

**Rationale for Key Technologies:**

* **Drizzle ORM** → TypeScript-first schema approach, strong typing, migrations
* **Zustand** → Lightweight, offline-first-friendly state management
* **React Query** → Caching, background sync, and offline handling
* **Expo-SQLite** → Local offline-first storage
* **Supabase** → Cloud storage, authentication, and synchronization

---

## Monorepo Structure

### Applications

* `apps/native/` → Mobile app
* `apps/web/` → Web dashboard

### Shared Packages

* `packages/core/` → Core logic, types, calculations, Zod schemas
* `packages/drizzle/` → Database schema + migrations (Drizzle ORM)
* `packages/supabase/` → Supabase types & helpers
* `packages/eslint-config/` → ESLint rules
* `packages/typescript-config/` → TypeScript configs

---

## Agentic Instructions

### Dynamic Context (Slash Commands)

* Current date:

```

/now

```

* Load development workflow:

```

/file WORKFLOW.md

```

* Load active tasks:

```

/file TASKS.md

```

* Load changelog:

```

/file CHANGELOG.md

```

* Load repo context manifest:

```

/file context.json

```


### Nested Rules (Modular per package/app)

Use these to dynamically inject domain-specific context:

```

/file rules/core.rules
/file rules/drizzle.rules
/file rules/web.rules
/file rules/native.rules
/file rules/supabase.rules
/file rules/eslint-config.rules
/file rules/typescript-config.rules

````

---

## Development Commands

### Root (project-level)

```bash
bun dev          # Start all apps
bun build        # Build all apps
bun lint         # Lint all code
bun test         # Run all tests
bun check-types  # Type check all packages
bun format       # Format code
````

### Mobile (`apps/native/`)

```bash
bun dev
bun ios
bun run android
bun test
bun test:e2e
```

### Web (`apps/web/`)

```bash
bun dev
bun build
bun start
bun lint
```

---

## Database & Storage

### Core Tables (Supabase)

`users`, `activities`, `activity_segments`, `user_metrics`, `user_achievements`, `fit_files`

### Local Storage (Expo-SQLite)

`local_activities`, `local_segments`, `local_fit_data`, `sync_queue`

### Sync & Reporting Rules

* When modifying sync-related code:

  * Report source → destination of each data flow
  * Report any conflicts and resolution strategy
  * Provide confidence level in correctness
* Maintain offline-first integrity at all times

---

## Environment Variables

**Mobile (`apps/native/.env`)**

```
EXPO_PUBLIC_SUPABASE_URL=your_supabase_url
EXPO_PUBLIC_SUPABASE_KEY=your_supabase_anon_key
```

**Web (`apps/web/.env.local`)**

```
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
```

---

## Development Notes

* Use **Bun** as the package manager with workspace dependencies
* Turbo orchestrates builds; Turbopack handles Next.js builds
* EAS Build for mobile production deployments
* Maintain offline-first functionality and consistent schema validation
* Reference scoped `README.md` files for context per package or app
* Include short explanations for tech choices whenever modifying packages
* Report actions incrementally and describe reasoning for each change

---

## Agent Behavior Rules

* Always confirm before performing destructive actions
* Check `TASKS.md` and `CHANGELOG.md` before committing
* Maintain consistency with shared packages and design patterns
* Use `/file` and `/prompt` commands to dynamically fetch context
* Plan edits and propose code changes incrementally
* Ask clarifying questions before modifying critical workflows or shared logic
* Prefer incremental updates over large sweeping changes to maintain reviewability
* Actively report:

  * What you are changing
  * Why you are changing it
  * What you are learning about the project or context
* Allow interruption if actions do not align with objectives
* Provide reasoning when proposing architectural or package-level changes
