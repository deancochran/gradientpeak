# Device-Agnostic Helper Functions for Maestro Tests
# These helpers work consistently across iOS and Android

# Authentication helpers
---
# Wait for auth screen with platform-agnostic selectors
- waitForAuthScreen:
  - runFlow:
      when:
        platform: iOS
      commands:
        - waitForAnimationToEnd
        - waitUntilVisible:
            text: "Sign In"
            timeout: ${DEFAULT_TIMEOUT}
  - runFlow:
      when:
        platform: Android  
      commands:
        - waitForAnimationToEnd
        - waitUntilVisible:
            text: "Sign In"
            timeout: ${DEFAULT_TIMEOUT}

---
# Enter email with device-agnostic approach
- enterEmail:
    email: ${TEST_EMAIL}
  - tapOn:
      id: "email-input"
      fallback:
        text: "Email"
  - inputText: ${email}

---
# Enter password with device-agnostic approach  
- enterPassword:
    password: ${TEST_PASSWORD}
  - tapOn:
      id: "password-input"
      fallback:
        text: "Password"
  - inputText: ${password}

---
# Sign in flow that works on both platforms
- signInFlow:
    email: ${TEST_EMAIL}
    password: ${TEST_PASSWORD}
  - waitForAuthScreen
  - enterEmail:
      email: ${email}
  - enterPassword:
      password: ${password}
  - tapOn:
      id: "sign-in-button"
      fallback:
        text: "Sign In"
  - waitForAnimationToEnd

---
# Sign up flow with device-agnostic selectors
- signUpFlow:
    email: ${TEST_EMAIL}
    password: ${TEST_PASSWORD}
    firstName: ${TEST_FIRST_NAME}
    lastName: ${TEST_LAST_NAME}
  - waitForAuthScreen
  - tapOn:
      text: "Create Account"
      fallback:
        id: "create-account-button"
  - waitForAnimationToEnd
  
  # Fill in first name
  - tapOn:
      id: "first-name-input"
      fallback:
        text: "First Name"
  - inputText: ${firstName}
  
  # Fill in last name
  - tapOn:
      id: "last-name-input" 
      fallback:
        text: "Last Name"
  - inputText: ${lastName}
  
  # Fill in email
  - enterEmail:
      email: ${email}
      
  # Fill in password
  - enterPassword:
      password: ${password}
      
  # Submit form
  - tapOn:
      id: "sign-up-button"
      fallback:
        text: "Create Account"
  - waitForAnimationToEnd

---
# Sign out flow with device-agnostic approach
- signOutFlow:
  - runFlow:
      when:
        platform: iOS
      commands:
        # iOS-specific navigation
        - tapOn:
            text: "Settings"
            fallback:
              id: "settings-tab"
  - runFlow:
      when:
        platform: Android
      commands:
        # Android-specific navigation (might use hamburger menu)
        - tapOn:
            id: "menu-button"
            fallback:
              accessibilityLabel: "Open navigation menu"
        - tapOn:
            text: "Settings"
  
  # Common sign out steps
  - tapOn:
      text: "Sign Out"
      fallback:
        id: "sign-out-button"
  - waitForAnimationToEnd

---
# Navigation helpers that work across platforms
- navigateToTab:
    tabName: "Dashboard"
  - tapOn:
      text: ${tabName}
      fallback:
        id: "${tabName.toLowerCase()}-tab"
  - waitForAnimationToEnd

---
# Wait for loading states with appropriate timeouts
- waitForLoading:
  - waitUntilNotVisible:
      id: "loading-spinner"
      fallback:
        text: "Loading..."
      timeout: ${LONG_TIMEOUT}

---
# Handle platform-specific keyboards
- dismissKeyboard:
  - runFlow:
      when:
        platform: iOS
      commands:
        - tapOn:
            text: "Done"
            optional: true
        - hideKeyboard
  - runFlow:
      when:
        platform: Android
      commands:
        - pressKey: "Back"
        - hideKeyboard

---
# Verify successful authentication
- verifyAuthenticated:
  - waitUntilVisible:
      text: "Dashboard"
      fallback:
        id: "dashboard-screen"
      timeout: ${LONG_TIMEOUT}

---
# Verify unauthenticated state
- verifyUnauthenticated:
  - waitUntilVisible:
      text: "Sign In"
      fallback:
        id: "auth-screen"
      timeout: ${LONG_TIMEOUT}

---
# Handle network errors gracefully
- handleNetworkError:
  - runFlow:
      when:
        visible:
          text: "Network Error"
      commands:
        - tapOn:
            text: "Retry"
            fallback:
              id: "retry-button"
        - waitForAnimationToEnd

---
# Accessibility verification helpers
- verifyAccessibility:
  - runFlow:
      when:
        platform: iOS
      commands:
        - assertTrue:
            condition: ${ACCESSIBILITY_ELEMENTS_COUNT} > 0
            message: "Screen should have accessibility elements"
  - runFlow:
      when:
        platform: Android
      commands:
        - assertTrue:
            condition: ${CONTENT_DESCRIPTION_COUNT} > 0  
            message: "Screen should have content descriptions"

---
# Error handling that works across platforms
- handleError:
    expectedError: "Invalid credentials"
  - waitUntilVisible:
      text: ${expectedError}
      fallback:
        id: "error-message"
      timeout: ${DEFAULT_TIMEOUT}

---
# Form validation helpers
- validateFormField:
    fieldId: "email-input"
    expectedError: "Please enter a valid email"
  - waitUntilVisible:
      id: "${fieldId}-error"
      fallback:
        text: ${expectedError}
      timeout: ${DEFAULT_TIMEOUT}