/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../database.types";

export const publicActivityMetricSchema = z.union([
  z.literal("heartrate"),
  z.literal("power"),
  z.literal("speed"),
  z.literal("cadence"),
  z.literal("distance"),
  z.literal("latlng"),
  z.literal("moving"),
  z.literal("altitude"),
  z.literal("temperature"),
  z.literal("gradient"),
]);

export const publicActivityMetricDataTypeSchema = z.union([
  z.literal("float"),
  z.literal("boolean"),
  z.literal("string"),
  z.literal("integer"),
  z.literal("latlng"),
]);

export const publicActivityTypeSchema = z.union([
  z.literal("bike"),
  z.literal("run"),
  z.literal("swim"),
  z.literal("strength"),
  z.literal("other"),
]);

export const publicSyncStatusSchema = z.union([
  z.literal("local_only"),
  z.literal("synced"),
  z.literal("sync_failed"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicActivitiesRowSchema = z.object({
  avg_cadence: z.number().nullable(),
  avg_heart_rate: z.number().nullable(),
  avg_power: z.number().nullable(),
  avg_speed: z.number().nullable(),
  created_at: z.string(),
  distance: z.number().nullable(),
  id: z.string(),
  idx: z.number(),
  if: z.number(),
  max_cadence: z.number().nullable(),
  max_heart_rate: z.number().nullable(),
  max_speed: z.number().nullable(),
  moving_time: z.number(),
  name: z.string(),
  normalized_power: z.number().nullable(),
  notes: z.string().nullable(),
  peak_power: z.number().nullable(),
  profile_id: z.string(),
  snapshot_ftp: z.number(),
  snapshot_threshold_hr: z.number(),
  snapshot_weight_kg: z.number(),
  started_at: z.string(),
  sync_status: publicSyncStatusSchema,
  total_ascent: z.number().nullable(),
  total_descent: z.number().nullable(),
  total_time: z.number(),
  tss: z.number(),
});

export const publicActivitiesInsertSchema = z.object({
  avg_cadence: z.number().optional().nullable(),
  avg_heart_rate: z.number().optional().nullable(),
  avg_power: z.number().optional().nullable(),
  avg_speed: z.number().optional().nullable(),
  created_at: z.string().optional(),
  distance: z.number().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  if: z.number(),
  max_cadence: z.number().optional().nullable(),
  max_heart_rate: z.number().optional().nullable(),
  max_speed: z.number().optional().nullable(),
  moving_time: z.number().optional(),
  name: z.string(),
  normalized_power: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  peak_power: z.number().optional().nullable(),
  profile_id: z.string(),
  snapshot_ftp: z.number(),
  snapshot_threshold_hr: z.number(),
  snapshot_weight_kg: z.number(),
  started_at: z.string(),
  sync_status: publicSyncStatusSchema.optional(),
  total_ascent: z.number().optional().nullable(),
  total_descent: z.number().optional().nullable(),
  total_time: z.number().optional(),
  tss: z.number(),
});

export const publicActivitiesUpdateSchema = z.object({
  avg_cadence: z.number().optional().nullable(),
  avg_heart_rate: z.number().optional().nullable(),
  avg_power: z.number().optional().nullable(),
  avg_speed: z.number().optional().nullable(),
  created_at: z.string().optional(),
  distance: z.number().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  if: z.number().optional(),
  max_cadence: z.number().optional().nullable(),
  max_heart_rate: z.number().optional().nullable(),
  max_speed: z.number().optional().nullable(),
  moving_time: z.number().optional(),
  name: z.string().optional(),
  normalized_power: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  peak_power: z.number().optional().nullable(),
  profile_id: z.string().optional(),
  snapshot_ftp: z.number().optional(),
  snapshot_threshold_hr: z.number().optional(),
  snapshot_weight_kg: z.number().optional(),
  started_at: z.string().optional(),
  sync_status: publicSyncStatusSchema.optional(),
  total_ascent: z.number().optional().nullable(),
  total_descent: z.number().optional().nullable(),
  total_time: z.number().optional(),
  tss: z.number().optional(),
});

export const publicActivitiesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("activities_profile_id_fkey"),
    columns: z.tuple([z.literal("profile_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicActivityStreamsRowSchema = z.object({
  activity_id: z.string(),
  chunk_index: z.number(),
  created_at: z.string(),
  data: jsonSchema,
  data_type: publicActivityMetricDataTypeSchema,
  id: z.string(),
  original_size: z.number(),
  sync_status: publicSyncStatusSchema,
  type: publicActivityMetricSchema,
});

export const publicActivityStreamsInsertSchema = z.object({
  activity_id: z.string(),
  chunk_index: z.number().optional(),
  created_at: z.string().optional(),
  data: jsonSchema,
  data_type: publicActivityMetricDataTypeSchema,
  id: z.string().optional(),
  original_size: z.number(),
  sync_status: publicSyncStatusSchema.optional(),
  type: publicActivityMetricSchema,
});

export const publicActivityStreamsUpdateSchema = z.object({
  activity_id: z.string().optional(),
  chunk_index: z.number().optional(),
  created_at: z.string().optional(),
  data: jsonSchema.optional(),
  data_type: publicActivityMetricDataTypeSchema.optional(),
  id: z.string().optional(),
  original_size: z.number().optional(),
  sync_status: publicSyncStatusSchema.optional(),
  type: publicActivityMetricSchema.optional(),
});

export const publicActivityStreamsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("activity_streams_activity_id_fkey"),
    columns: z.tuple([z.literal("activity_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("activities"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlannedActivitiesRowSchema = z.object({
  activity_type: publicActivityTypeSchema,
  completed_activity_id: z.string().nullable(),
  created_at: z.string(),
  description: z.string().nullable(),
  estimated_distance: z.number().nullable(),
  estimated_duration: z.number().nullable(),
  estimated_tss: z.number().nullable(),
  id: z.string(),
  idx: z.number(),
  name: z.string(),
  profile_plan_id: z.string().nullable(),
  scheduled_date: z.string(),
  structure: jsonSchema,
});

export const publicPlannedActivitiesInsertSchema = z.object({
  activity_type: publicActivityTypeSchema,
  completed_activity_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  estimated_distance: z.number().optional().nullable(),
  estimated_duration: z.number().optional().nullable(),
  estimated_tss: z.number().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  name: z.string(),
  profile_plan_id: z.string().optional().nullable(),
  scheduled_date: z.string(),
  structure: jsonSchema,
});

export const publicPlannedActivitiesUpdateSchema = z.object({
  activity_type: publicActivityTypeSchema.optional(),
  completed_activity_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  estimated_distance: z.number().optional().nullable(),
  estimated_duration: z.number().optional().nullable(),
  estimated_tss: z.number().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  name: z.string().optional(),
  profile_plan_id: z.string().optional().nullable(),
  scheduled_date: z.string().optional(),
  structure: jsonSchema.optional(),
});

export const publicPlannedActivitiesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("planned_activities_profile_plan_id_fkey"),
    columns: z.tuple([z.literal("profile_plan_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profile_plans"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfilePlansRowSchema = z.object({
  config: jsonSchema,
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  idx: z.number(),
  name: z.string(),
  profile_id: z.string(),
});

export const publicProfilePlansInsertSchema = z.object({
  config: jsonSchema,
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  name: z.string(),
  profile_id: z.string(),
});

export const publicProfilePlansUpdateSchema = z.object({
  config: jsonSchema.optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  name: z.string().optional(),
  profile_id: z.string().optional(),
});

export const publicProfilePlansRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("profile_plans_profile_id_fkey"),
    columns: z.tuple([z.literal("profile_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicProfilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  bio: z.string().nullable(),
  created_at: z.string(),
  dob: z.string().nullable(),
  ftp: z.number().nullable(),
  gender: z.string().nullable(),
  id: z.string(),
  idx: z.number(),
  language: z.string().nullable(),
  onboarded: z.boolean().nullable(),
  preferred_units: z.string().nullable(),
  threshold_hr: z.number().nullable(),
  username: z.string().nullable(),
  weight_kg: z.number().nullable(),
});

export const publicProfilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  dob: z.string().optional().nullable(),
  ftp: z.number().optional().nullable(),
  gender: z.string().optional().nullable(),
  id: z.string(),
  idx: z.number().optional(),
  language: z.string().optional().nullable(),
  onboarded: z.boolean().optional().nullable(),
  preferred_units: z.string().optional().nullable(),
  threshold_hr: z.number().optional().nullable(),
  username: z.string().optional().nullable(),
  weight_kg: z.number().optional().nullable(),
});

export const publicProfilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  dob: z.string().optional().nullable(),
  ftp: z.number().optional().nullable(),
  gender: z.string().optional().nullable(),
  id: z.string().optional(),
  idx: z.number().optional(),
  language: z.string().optional().nullable(),
  onboarded: z.boolean().optional().nullable(),
  preferred_units: z.string().optional().nullable(),
  threshold_hr: z.number().optional().nullable(),
  username: z.string().optional().nullable(),
  weight_kg: z.number().optional().nullable(),
});
