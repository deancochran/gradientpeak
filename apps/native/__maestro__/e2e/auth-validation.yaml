# Test: Device-Agnostic Authentication Validation
# Tests form validation, error handling, and edge cases across platforms
---
appId: ${APP_BUNDLE_ID}
name: Device-Agnostic Authentication Validation
tags:
  - auth
  - validation
  - error-handling
  - regression

---
# Import device-agnostic helpers
- runFlow: "../../../.maestro/helpers/device-agnostic-helpers.yaml"

# Test Suite: Email Validation
---
- launchApp
- waitForAnimationToEnd
- waitForAuthScreen

# Test invalid email format
- enterEmail:
    email: "invalid-email-format"
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

# Should show email validation error
- handleError:
    expectedError: "Please enter a valid email"

# Clear and test empty email
- tapOn:
    id: "email-input"
    fallback:
      text: "Email"
- clearText
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

- handleError:
    expectedError: "Email is required"

# Test Suite: Password Validation
---
# Test weak password
- enterEmail:
    email: "${TEST_EMAIL}"
- enterPassword:
    password: "123"
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

- handleError:
    expectedError: "Password must be at least"

# Test empty password
- tapOn:
    id: "password-input"
    fallback:
      text: "Password"
- clearText
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

- handleError:
    expectedError: "Password is required"

# Test Suite: Network Error Handling
---
# Simulate network connectivity issues
- enterEmail:
    email: "test@example.com"
- enterPassword:
    password: "ValidPassword123!"

# This would need to be coordinated with test environment
# to actually simulate network failures
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

# Handle potential network errors gracefully
- handleNetworkError

# Test Suite: Authentication Edge Cases
---
# Test with special characters in email
- enterEmail:
    email: "test+special@example.com"
- enterPassword:
    password: "ValidPassword123!"
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

# Should handle gracefully (either succeed or show appropriate error)
- runFlow:
    when:
      visible:
        text: "Dashboard"
    commands:
      - verifyAuthenticated
      - signOutFlow

# Test with Unicode characters
- runFlow:
    when:
      visible:
        text: "Sign In"
    commands:
      - enterEmail:
          email: "tëst@exämple.com"
      - enterPassword:
          password: "Pässwörd123!"
      - tapOn:
          id: "sign-in-button"
          fallback:
            text: "Sign In"
      - waitForAnimationToEnd

# Test Suite: Platform-Specific Behaviors
---
# iOS-specific tests
- runFlow:
    when:
      platform: iOS
    commands:
      # Test iOS keyboard handling
      - tapOn:
          id: "email-input"
      - inputText: "test@example.com"
      - dismissKeyboard
      
      # Test iOS-specific navigation
      - swipe:
          direction: LEFT
          optional: true
          
      # Test iOS accessibility features
      - verifyAccessibility

# Android-specific tests  
- runFlow:
    when:
      platform: Android
    commands:
      # Test Android back button behavior
      - tapOn:
          id: "email-input"
      - inputText: "test@example.com"
      - pressKey: "Back"
      
      # Test Android-specific UI patterns
      - tapOn:
          contentDescription: "Navigate up"
          optional: true
      
      # Test Android accessibility features
      - verifyAccessibility

# Test Suite: Accessibility Validation
---
# Test screen reader compatibility
- runFlow:
    when:
      platform: iOS
    commands:
      - assertTrue:
          condition: ${ACCESSIBILITY_ELEMENTS_COUNT} > 0
          message: "Screen should have accessibility elements for iOS"

- runFlow:
    when:
      platform: Android  
    commands:
      - assertTrue:
          condition: ${CONTENT_DESCRIPTION_COUNT} > 0
          message: "Screen should have content descriptions for Android"

# Test minimum touch target sizes
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"
- assertTrue:
    condition: ${ELEMENT_HEIGHT} >= 44
    message: "Touch targets should meet minimum size requirements"

# Test Suite: Performance Validation
---
# Test app launch performance
- launchApp
- stopwatch: "app_launch"
- waitForAnimationToEnd
- stopwatch: "app_launch"

# Verify launch time is reasonable
- assertTrue:
    condition: ${app_launch} < 10000
    message: "App should launch within 10 seconds"

# Test authentication flow performance
- waitForAuthScreen
- stopwatch: "auth_flow"
- signInFlow:
    email: "${TEST_EMAIL}"
    password: "${TEST_PASSWORD}"
- verifyAuthenticated
- stopwatch: "auth_flow"

# Verify auth flow performance
- assertTrue:
    condition: ${auth_flow} < 15000
    message: "Authentication should complete within 15 seconds"

# Test Suite: Memory and Resource Management
---
# Test multiple authentication attempts don't cause memory leaks
- repeat:
    times: 3
    commands:
      - signOutFlow
      - waitForAuthScreen
      - signInFlow:
          email: "${TEST_EMAIL}"
          password: "${TEST_PASSWORD}"
      - verifyAuthenticated
      - waitForAnimationToEnd

# Verify app is still responsive after multiple auth cycles
- assertVisible:
    text: "Dashboard"
    timeout: ${DEFAULT_TIMEOUT}

# Test Suite: Cleanup and State Management
---
# Test that failed authentication doesn't leave app in bad state
- signOutFlow
- waitForAuthScreen
- enterEmail:
    email: "invalid@nonexistent.com"
- enterPassword:
    password: "wrongpassword"
- tapOn:
    id: "sign-in-button"
    fallback:
      text: "Sign In"

# Should show error but not crash
- handleError:
    expectedError: "Invalid credentials"

# App should still be functional
- assertVisible:
    text: "Sign In"
    timeout: ${DEFAULT_TIMEOUT}

# Should be able to recover and sign in with valid credentials
- signInFlow:
    email: "${TEST_EMAIL}"
    password: "${TEST_PASSWORD}"
- verifyAuthenticated